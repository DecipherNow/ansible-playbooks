---
# vpc

  - name: create VPC
    ec2_vpc_net:
      cidr_block: 192.168.0.0/16
      name: "greymatter-ecs-example"
      state: present
      region: "{{ aws_region }}"
      resource_tags:
        Name: "greymatter-ecs-example"
        ecs/cluster/greymatter-ecs-example: "owned"
    register: setup_vpc

  - name: check that vpc did not change
    assert:
     that:
       - not setup_vpc.changed

        
  - name: create private subnets
    ec2_vpc_subnet:
      az: '{{ aws_region }}{{ item.zone }}'
      tags:
        Name: 'greymatter-ecs-example-private-{{ item.num }}'
      vpc_id: '{{ setup_vpc.vpc.id }}'
      cidr: "{{ item.cidr }}"
      state: present
    register: setup_private_subnet
    with_items:
      - zone: a
        cidr: 192.168.0.0/19
        num: 0
      - zone: b
        cidr: 192.168.32.0/19
        num: 1
      - zone: c
        cidr: 192.168.64.0/19
        num: 2

  - name: create public subnets
    ec2_vpc_subnet:
      az: '{{ aws_region }}{{ item.zone }}'
      tags:
        Name: 'greymatter-ecs-example-public-{{ item.num }}'
      vpc_id: '{{ setup_vpc.vpc.id }}'
      cidr: "{{ item.cidr }}"
      state: present
    register: setup_public_subnet
    with_items:
      - zone: a
        cidr: 192.168.0.0/19
        num: 0
      - zone: b
        cidr: 192.168.32.0/19
        num: 1
      - zone: c
        cidr: 192.168.64.0/19
        num: 2

  - name: create an internet gateway so that ECS agents can talk to ECS (public)
    ec2_vpc_igw:
      vpc_id: '{{ setup_vpc.vpc.id }}'
      state: present
      tags:
        Name: 'greymatter-ecs-example-public-gw'
    register: igw

  - name: public route table associations
    ec2_vpc_route_table:
      vpc_id: '{{ setup_vpc.vpc.id }}'
      region: "{{aws_region }}"
      subnets: "{{ setup_public_subnet.results | json_query('[].subnet.id') }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"
      state: present
    register: route_table

  - name: private route table associations
    ec2_vpc_route_table:
      vpc_id: '{{ setup_vpc.vpc.id }}'
      region: "{{ aws_region }}"
      subnets: "{{ setup_private_subnet.results | json_query('[].subnet.id') }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"
      state: present
    register: private_route_table


    # security group
    
  - name: security group for ec2 instances
    ec2_group:
      name: "EC2ContainerService-greymatter-ecs-cluster-EcsSecurityGroup-M4LGALUQHS8W"
      state: present
      description: "ECS Allowed Ports"
      vpc_id: '{{ setup_vpc.vpc.id }}'
      rules:
      - from_port: 80
        to_port: 80
        cidr_ip: 192.168.0.0/16
        proto: tcp
      rules_egress:
      - proto: "-1"
        from_port: 0
        to_port: 0
        cidr_ip: 0.0.0.0/0
      - proto: "-1"
        from_port: 0
        to_port: 0
        cidr_ipv6: "::/0"
    register: setup_sg

  - name: update security group for ec2 instances
    ec2_group:
      name: "EC2ContainerService-greymatter-ecs-cluster-EcsSecurityGroup-M4LGALUQHS8W"
      state: present
      description: "ECS Allowed Ports"
      vpc_id: '{{ setup_vpc.vpc.id }}'
      rules:
      - from_port: 80
        to_port: 80
        cidr_ip: 192.168.0.0/16
        proto: tcp
      - group_id: "{{ setup_sg.group_id }}"
        proto: all
      rules_egress:
      - proto: "-1"
        from_port: 0
        to_port: 0
        cidr_ip: 0.0.0.0/0
      - proto: "-1"
        from_port: 0
        to_port: 0
        cidr_ipv6: "::/0"

        

    # instances

  # - name: find a suitable AMI
  #   ec2_ami_facts:
  #     owner: amazon
  #     filters:
  #       description: "Amazon Linux AMI * ECS *"
  #   register: ec2_ami_facts
      
  - name: set image id fact
    set_fact:
      ecs_image_id: "ami-05085b57e47cdc27d"

  - name: create instance target group for autoscaling
    elb_target_group:
        name: "gm-ecs-alb-tg-inst"
        state: present
        protocol: http
        port: 80
        vpc_id: '{{ setup_vpc.vpc.id }}'
        target_type: instance
    register: elb_target_group_instance

  - name: create instance target group for control api
    elb_target_group:
        name: "gm-ecs-alb-tg-inst-control-api"
        state: present
        protocol: http
        port: 80
        vpc_id: '{{ setup_vpc.vpc.id }}'
        target_type: instance

  - name: create instance target group for control api proxy
    elb_target_group:
        name: "gm-ecs-alb-tg-inst-ctrl-api-pxy"
        state: present
        protocol: http
        port: 80
        vpc_id: '{{ setup_vpc.vpc.id }}'
        target_type: instance

  - name: create ip target group control api
    elb_target_group:
        name: "gm-ecs-alb-tg-ip-control-api"
        state: present
        protocol: http
        port: 80
        vpc_id: '{{ setup_vpc.vpc.id }}'
        target_type: ip

  - name: create instance target group for control
    elb_target_group:
        name: "gm-ecs-alb-tg-inst-control"
        state: present
        protocol: http
        port: 80
        vpc_id: '{{ setup_vpc.vpc.id }}'
        target_type: instance

  - name: create ip target group control
    elb_target_group:
        name: "gm-ecs-alb-tg-ip-control"
        state: present
        protocol: http
        port: 80
        vpc_id: '{{ setup_vpc.vpc.id }}'
        target_type: ip

  - name: create instance target group for edge
    elb_target_group:
        name: "gm-ecs-alb-tg-inst-edge"
        state: present
        protocol: http
        port: 80
        vpc_id: '{{ setup_vpc.vpc.id }}'
        target_type: instance

  - name: create ip target group edge
    elb_target_group:
        name: "gm-ecs-alb-tg-ip-edge"
        state: present
        protocol: http
        port: 80
        vpc_id: '{{ setup_vpc.vpc.id }}'
        target_type: ip

  - name: create instance target group for data to connect to catalog
    elb_target_group:
        name: "gm-ecs-alb-tg-inst-data"
        state: present
        protocol: http
        port: 80
        vpc_id: '{{ setup_vpc.vpc.id }}'
        target_type: instance

  - name: create instance target group for jwt to connect to data
    elb_target_group:
        name: "gm-ecs-alb-tg-inst-jwt"
        state: present
        protocol: http
        port: 80
        vpc_id: '{{ setup_vpc.vpc.id }}'
        target_type: instance

  - name: create load balancer for autoscaling
    elb_application_lb:
      name: "greymatter-ecs-alb-autscaling"
      state: present
      scheme: internal
      security_groups:  '{{ setup_sg.group_id }}'
      subnets: "{{ setup_public_subnet.results | json_query('[].subnet.id') }}"
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "gm-ecs-alb-tg-inst"

  - name: create load balancer for control
    elb_application_lb:
      name: "greymatter-ecs-alb-control"
      state: present
      scheme: internal
      security_groups: '{{ setup_sg.group_id }}'
      subnets: "{{ setup_public_subnet.results | json_query('[].subnet.id') }}"
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "gm-ecs-alb-tg-inst-control"
        - Protocol: HTTP
          Port: 81
          DefaultActions:
            - Type: forward
              TargetGroupName: "gm-ecs-alb-tg-ip-control"
    register: setup_elb_control

  - name: create load balancer for control api proxy
    elb_application_lb:
      name: "greymatter-ecs-alb-ctrl-api-pxy"
      state: present
      scheme: internal
      security_groups: '{{ setup_sg.group_id }}'
      subnets: "{{ setup_public_subnet.results | json_query('[].subnet.id') }}"
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "gm-ecs-alb-tg-inst-ctrl-api-pxy"

  - name: create load balancer for control api
    elb_application_lb:
      name: "greymatter-ecs-alb-control-api"
      state: present
      scheme: internal
      security_groups: '{{ setup_sg.group_id }}'
      subnets: "{{ setup_public_subnet.results | json_query('[].subnet.id') }}"
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "gm-ecs-alb-tg-inst-control-api"
        - Protocol: HTTP
          Port: 81
          DefaultActions:
            - Type: forward
              TargetGroupName: "gm-ecs-alb-tg-ip-control-api"
    register: setup_elb_control_api

  - name: create internet facing load balancer for edge
    elb_application_lb:
      name: "external-greymatter-ecs-alb-edge"
      state: present
      security_groups: '{{ setup_sg.group_id }}'
      subnets: "{{ setup_public_subnet.results | json_query('[].subnet.id') }}"
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "gm-ecs-alb-tg-inst-edge"
        - Protocol: HTTP
          Port: 81
          DefaultActions:
            - Type: forward
              TargetGroupName: "gm-ecs-alb-tg-ip-edge"
    register: setup_elb_edge

  - name: create internal load balancer for data
    elb_application_lb:
      name: "greymatter-ecs-alb-data"
      state: present
      scheme: internal
      security_groups: '{{ setup_sg.group_id }}'
      subnets: "{{ setup_public_subnet.results | json_query('[].subnet.id') }}"
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "gm-ecs-alb-tg-inst-data"
    register: setup_elb_data

  - name: create internal load balancer for jwt
    elb_application_lb:
      name: "greymatter-ecs-alb-jwt"
      state: present
      scheme: internal
      security_groups: '{{ setup_sg.group_id }}'
      subnets: "{{ setup_public_subnet.results | json_query('[].subnet.id') }}"
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "gm-ecs-alb-tg-inst-jwt"
    register: setup_elb_jwt

  - name: create a key pair to use for creating an ec2 instance
    ec2_key:
      name: 'enter_greymatter_ecs_cluster'
      state: present
    when: ec2_keypair is not defined
    register: setup_key

  - name: create launch config
    ec2_lc:
      name: "greymatter-ecs-launch-config"
      image_id: '{{ ecs_image_id }}'
      key_name:  '{{ ec2_keypair|default(setup_key.key.name) }}'
      region: "{{ aws_region }}"
      security_groups: '{{ setup_sg.group_id }}'
      instance_type: t2.medium
      assign_public_ip: yes
      user_data: "{{ lookup('file', 'cloud-config.yml')}}"
      instance_profile_name: "arn:aws:iam::706634194319:instance-profile/ecsInstanceRole"
      state: present
    register: setup_lc
      
  - name:  set up autoscaling group
    ec2_asg:
      name: "EC2ContainerService-greymatter-ecs-cluster-EcsInstanceAsg-1DA526EFJVK0I"
      vpc_zone_identifier: "{{ setup_public_subnet.results | json_query('[].subnet.id') }}"
      min_size: 0
      max_size: 3
      desired_capacity: 3
      state: present
      launch_config_name: 'greymatter-ecs-launch-config'
      replace_all_instances: yes
      region: "{{ aws_region }}"
      health_check_type: EC2
      target_group_arns: "{{ elb_target_group_instance.target_group_arn }}"
