---

  - name: Create task definition slo
    ecs_taskdefinition:
      state: present
      family: "greymatter-slo"
      network_mode: awsvpc
      launch_type: FARGATE
      cpu: 512
      memory: 1024
      region: "{{ aws_region }}"
      execution_role_arn: "{{ ecs_instance_role }}"
      task_role_arn: "{{ ecs_instance_role }}"
      volumes:
      - name: certs
      - name: "postgres-config"
      - name: "postgres-certs"
      - name: "postgres-sla-data"
      containers:
      - name: "proxy-slo"
        essential: true
        image: "{{ greymatter_proxy_image }}"
        repositoryCredentials:
          credentialsParameter: "{{ credentials_parameter }}"
        dockerLabels:
          gm-cluster: "sidecar-slo"
        environment:
        - name: "ENVOY_ADMIN_LOG_PATH"
          value: "/dev/stdout"
        - name: "PROXY_DYNAMIC"
          value: "true"
        - name: "XDS_CLUSTER"
          value: slo
        - name: "XDS_HOST"
          value: "{{ elb_control }}" # todo point to gm-control
        - name: "XDS_PORT"
          value: 50000
        - name: "XDS_NODE_ID"
          value: "default-node"
        portMappings:
        - containerPort: 9080
          hostPort: 9080
          protocol: tcp
        - containerPort: 8081
          hostPort: 8081
          protocol: tcp
        mountPoints:
        - containerPath: "/etc/proxy/tls/sidecar"
          sourceVolume: certs
        logConfiguration:
          logDriver: awslogs
          options:
            awslogs-group: openjobs
            awslogs-region: "{{ aws_region }}"
            awslogs-stream-prefix: web
      - name: slo
        essential: false
        image: "docker.production.deciphernow.com/deciphernow/gm-slo:latest"
        repositoryCredentials:
          credentialsParameter: "{{ credentials_parameter }}"
        dockerLabels:
          gm-cluster: "service-slo"
        environment:
        - name: "DROP_SCHEMA"
          value: "false"
        - name: "SSL_ENABLED"
          value: "false"
        - name: "DATABASE_URI" # todo: update to point to RDS DB
          value: "postgres://slo-user:{{ lookup('aws_secret', 'slo-psql-pass') }}@localhost:5432/slodb"
        portMappings:
        - containerPort: 1337
          hostPort: 1337
          protocol: tcp
        logConfiguration:
          logDriver: awslogs
          options:
            awslogs-group: openjobs
            awslogs-region: "{{ aws_region }}"
            awslogs-stream-prefix: web
      - name: postgres
        essential: false
        image: "docker.io/centos/postgresql-95-centos7"
        environment:
        - name: POSTGRESQL_USER
          value: "slo-user"
        - name: POSTGRESQL_PASSWORD
          value: "{{ lookup('aws_secret', 'slo-psql-pass') }}"
        - name: POSTGRESQL_DATABASE
          value: slodb
        portMappings:
        - containerPort: 5432
          hostPort: 5432
          protocol: tcp
        mountPoints:
        - containerPath: "/var/lib/postgresql"
          sourceVolume: "postgres-config"
          readOnly: true
        - containerPath: "/var/lib/postgresql/certs"
          sourceVolume: "postgres-certs"
          readOnly: true
        - containerPath: "/var/lib/pgsql/data1"
          sourceVolume: "postgres-sla-data"
          readOnly: true
        logConfiguration:
          logDriver: awslogs
          options:
            awslogs-group: openjobs
            awslogs-region: "{{ aws_region }}"
            awslogs-stream-prefix: web
    register: task_output

  - name: ECS service
    ecs_service:
      state: present
      name: slo
      cluster: "{{ cluster_name }}"
      region: "{{ aws_region }}"
      launch_type: FARGATE
      task_definition: "{{  task_output.taskdefinition[\"family\"]   }}:{{ task_output.taskdefinition[\"revision\"] }}"
      desired_count: 1
      network_configuration:
        assign_public_ip: true
        security_groups: "{{ security_group }}"
        subnets: "{{ subnet_list }}"
    register: "ecs_service"
