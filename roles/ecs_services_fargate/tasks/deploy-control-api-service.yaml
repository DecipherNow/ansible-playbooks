---

  - name: Create task definition control-api
    ecs_taskdefinition:
      state: present
      family: "greymatter-control-api"
      network_mode: awsvpc
      launch_type: FARGATE
      cpu: 512
      memory: 1024
      region: "{{ aws_region }}"
      execution_role_arn: "{{ ecs_instance_role }}"
      task_role_arn: "{{ ecs_instance_role }}"
      containers:
      - name: "proxy-control-api"
        essential: true
        image: "{{ greymatter_proxy_image }}"
        repositoryCredentials:
          credentialsParameter: "{{ credentials_parameter_deciphernow }}"
        dockerLabels:
          gm-cluster: "control-api:5555"
        secrets:
        - name: INGRESS_TLS_CERT
          valueFrom: arn:aws:secretsmanager:us-east-1:269783025111:secret:sidecar-certs-cert-b64-GvrspG
        - name: INGRESS_TLS_KEY
          valueFrom: arn:aws:secretsmanager:us-east-1:269783025111:secret:sidecar-certs-key-b64-m46Nvr
        - name: EGRESS_TLS_CERT
          valueFrom: arn:aws:secretsmanager:us-east-1:269783025111:secret:sidecar-certs-server-b64-uIFYGU
        - name: EGRESS_TLS_KEY
          valueFrom: arn:aws:secretsmanager:us-east-1:269783025111:secret:sidecar-certs-server-key-b64-L0xcew
        - name: EGRESS_TLS_TRUST
          valueFrom:  arn:aws:secretsmanager:us-east-1:269783025111:secret:sidecar-certs-ca-oyDcNY
        - name: INGRESS_TLS_TRUST
          valueFrom:  arn:aws:secretsmanager:us-east-1:269783025111:secret:sidecar-certs-ca-oyDcNY
        environment:
        - name: "ENVOY_ADMIN_LOG_PATH"
          value: "/dev/stdout"
        - name: "PROXY_DYNAMIC"
          value: "true"
        - name: "XDS_CLUSTER"
          value: "control-api"
        - name: "XDS_PORT"
          value: 50000
        - name: "XDS_NODE_ID"
          value: "default-node"
        - name: "XDS_HOST"
          value: "{{ elb_control }}"
        portMappings:
        - containerPort: 9080
          hostPort: 9080
          protocol: tcp
        - containerPort: 8081
          hostPort: 8081
          protocol: tcp
        logConfiguration:
          logDriver: awslogs
          options:
            awslogs-group: openjobs
            awslogs-region: "{{ aws_region }}"
            awslogs-stream-prefix: web
      - name: "control-api"
        essential: true
        image: "docker.production.deciphernow.com/deciphernow/gm-control-api:1.4.4"
        repositoryCredentials:
          credentialsParameter: "{{ credentials_parameter_prod }}"
        environment:
        - name: "GM_CONTROL_API_ADDRESS"
          value: "0.0.0.0:5555"
        - name: "GM_CONTROL_API_LOG_LEVEL"
          value: debug
        - name: "GM_CONTROL_API_ORG_KEY"
          value: deciphernow
        - name: "GM_CONTROL_API_PERSISTER_TYPE"
          value: "null"
        - name: "GM_CONTROL_API_ZONE_KEY"
          value: "default-zone"
        portMappings:
        - containerPort: 5555
          hostPort: 5555
          protocol: tcp
        logConfiguration:
          logDriver: awslogs
          options:
            awslogs-group: openjobs
            awslogs-region: "{{ aws_region }}"
            awslogs-stream-prefix: web
    register: task_output

  - name: ECS service control-api
    ecs_service:
      state: present
      name: control-api
      cluster: "{{ cluster_name }}"
      region: "{{ aws_region }}"
      launch_type: FARGATE
      task_definition: "{{  task_output.taskdefinition[\"family\"]   }}:{{ task_output.taskdefinition[\"revision\"] }}"
      desired_count: 1
      network_configuration:
        assign_public_ip: true
        security_groups: "{{ security_group }}"
        subnets: "{{ subnet_list }}"
      load_balancers:
        - targetGroupArn: "{{ task_target_group_control_api }}"
          containerName: "control-api"
          containerPort: 5555
    register: "ecs_service"
